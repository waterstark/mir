"""create model

Revision ID: 8212291cbec0
Revises: 
Create Date: 2023-07-26 13:58:51.720678

"""
import sqlalchemy_utils
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '8212291cbec0'
down_revision = None
branch_labels = None
depends_on = None
from src.auth.params_choice import for_passion, for_gender, for_body_type, for_goals


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('email', sa.String(length=50), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('hashed_password', sa.String(length=1024), nullable=False),
                    sa.Column('is_active', sa.Boolean(), nullable=False),
                    sa.Column('is_superuser', sa.Boolean(), nullable=False),
                    sa.Column('is_verified', sa.Boolean(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_table('likes',
                    sa.Column('like_id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.Column('liked_user_id', sa.Integer(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['liked_user_id'], ['user.id'], ondelete='RESTRICT'),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='RESTRICT'),
                    sa.PrimaryKeyConstraint('like_id', 'user_id', 'liked_user_id')
                    )
    op.create_index(op.f('ix_likes_like_id'), 'likes', ['like_id'], unique=False)
    op.create_table('matches',
                    sa.Column('match_id', sa.Integer(), nullable=False),
                    sa.Column('user1_id', sa.Integer(), nullable=False),
                    sa.Column('user2_id', sa.Integer(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['user1_id'], ['user.id'], ondelete='RESTRICT'),
                    sa.ForeignKeyConstraint(['user2_id'], ['user.id'], ondelete='RESTRICT'),
                    sa.PrimaryKeyConstraint('match_id')
                    )
    op.create_table('messages',
                    sa.Column('message_id', sa.Integer(), nullable=False),
                    sa.Column('sender', sa.Integer(), nullable=False),
                    sa.Column('receiver', sa.Integer(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('message_text', sa.String(), nullable=False),
                    sa.ForeignKeyConstraint(['receiver'], ['user.id'], ondelete='RESTRICT'),
                    sa.ForeignKeyConstraint(['sender'], ['user.id'], ondelete='RESTRICT'),
                    sa.PrimaryKeyConstraint('message_id')
                    )
    op.create_index(op.f('ix_messages_message_id'), 'messages', ['message_id'], unique=False)
    op.create_table('user_questionnaire',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('firstname', sa.String(length=15), nullable=False),
                    sa.Column('lastname', sa.String(length=15), nullable=True),
                    sa.Column('gender', sqlalchemy_utils.types.choice.ChoiceType(for_gender), nullable=False),
                    sa.Column('photo', sa.String(), nullable=True),
                    sa.Column('country', sa.String(), nullable=False),
                    sa.Column('city', sa.String(), nullable=False),
                    sa.Column('latitude', sa.Numeric(precision=8, scale=5), nullable=False),
                    sa.Column('longitude', sa.Numeric(precision=8, scale=5), nullable=False),
                    sa.Column('about', sa.String(), nullable=False),
                    sa.Column('passion', sqlalchemy_utils.types.choice.ChoiceType(for_passion), nullable=False),
                    sa.Column('height', sa.Integer(), nullable=False),
                    sa.Column('goals', sqlalchemy_utils.types.choice.ChoiceType(for_goals), nullable=False),
                    sa.Column('body_type', sqlalchemy_utils.types.choice.ChoiceType(for_body_type), nullable=False),
                    sa.Column('is_visible', sa.Boolean(), nullable=False),
                    sa.ForeignKeyConstraint(['id'], ['user.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('user_settings',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('black_list', sa.Integer(), nullable=True),
                    sa.Column('subscriber', sa.DateTime(), nullable=True),
                    sa.Column('last_seen', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['id'], ['user.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_settings')
    op.drop_table('user_questionnaire')
    op.drop_index(op.f('ix_messages_message_id'), table_name='messages')
    op.drop_table('messages')
    op.drop_table('matches')
    op.drop_index(op.f('ix_likes_like_id'), table_name='likes')
    op.drop_table('likes')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    # ### end Alembic commands ###
