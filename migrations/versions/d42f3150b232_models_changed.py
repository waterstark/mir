"""models changed

Revision ID: d42f3150b232
Revises: 8212291cbec0
Create Date: 2023-07-26 21:29:21.268580

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd42f3150b232'
down_revision = '8212291cbec0'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('like',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.Column('liked_user_id', sa.Integer(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['liked_user_id'], ['user.id'], ondelete='RESTRICT'),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='RESTRICT'),
                    sa.PrimaryKeyConstraint('id', 'user_id', 'liked_user_id')
                    )
    op.create_index(op.f('ix_like_id'), 'like', ['id'], unique=False)
    op.create_table('match',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('user1_id', sa.Integer(), nullable=False),
                    sa.Column('user2_id', sa.Integer(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['user1_id'], ['user.id'], ondelete='RESTRICT'),
                    sa.ForeignKeyConstraint(['user2_id'], ['user.id'], ondelete='RESTRICT'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.drop_index('ix_likes_like_id', table_name='likes')
    op.drop_table('likes')
    op.drop_table('matches')
    op.add_column('messages', sa.Column('id', sa.Integer(), nullable=False))
    op.drop_index('ix_messages_message_id', table_name='messages')
    op.create_index(op.f('ix_messages_id'), 'messages', ['id'], unique=False)
    op.drop_column('messages', 'message_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('messages', sa.Column('message_id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.drop_index(op.f('ix_messages_id'), table_name='messages')
    op.create_index('ix_messages_message_id', 'messages', ['message_id'], unique=False)
    op.drop_column('messages', 'id')
    op.create_table('matches',
                    sa.Column('match_id', sa.INTEGER(), autoincrement=True, nullable=False),
                    sa.Column('user1_id', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.Column('user2_id', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(['user1_id'], ['user.id'], name='matches_user1_id_fkey',
                                            ondelete='RESTRICT'),
                    sa.ForeignKeyConstraint(['user2_id'], ['user.id'], name='matches_user2_id_fkey',
                                            ondelete='RESTRICT'),
                    sa.PrimaryKeyConstraint('match_id', name='matches_pkey')
                    )
    op.create_table('likes',
                    sa.Column('like_id', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.Column('liked_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(['liked_user_id'], ['user.id'], name='likes_liked_user_id_fkey',
                                            ondelete='RESTRICT'),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='likes_user_id_fkey', ondelete='RESTRICT'),
                    sa.PrimaryKeyConstraint('like_id', 'user_id', 'liked_user_id', name='likes_pkey')
                    )
    op.create_index('ix_likes_like_id', 'likes', ['like_id'], unique=False)
    op.drop_table('match')
    op.drop_index(op.f('ix_like_id'), table_name='like')
    op.drop_table('like')
    # ### end Alembic commands ###
